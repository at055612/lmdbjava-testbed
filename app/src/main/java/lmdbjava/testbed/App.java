/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lmdbjava.testbed;

import org.lmdbjava.Dbi;
import org.lmdbjava.DbiFlags;
import org.lmdbjava.Env;
import org.lmdbjava.EnvFlags;
import org.lmdbjava.Txn;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

public class App {

    public static void main(String[] args) {
        if (args == null || args.length < 1) {
            System.err.println("ERROR: Expecting a path as the 1st argument");
            System.exit(1);
        }
        new App().run(Path.of(args[0]));
    }

    private void run(final Path dir) {
        System.out.println("Ensuring directory " + dir);
        try {
            Files.createDirectories(dir);
        } catch (IOException e) {
            throw new RuntimeException("Unable to create directory " + dir, e);
        }

        final String propKey = "lmdbjava.extract.dir";
        System.setProperty(propKey, dir.toAbsolutePath().normalize().toString());
        System.out.println("Setting prop '" + propKey + "' to '" + dir.toAbsolutePath().normalize() + "'");

        try (Env<ByteBuffer> env = Env.create()
                .setMapSize(10 * 1024 * 1024)
                .setMaxDbs(1)
                .setMaxReaders(5)
                .open(dir.toFile(), EnvFlags.MDB_NOTLS)) {

            final Dbi<ByteBuffer> db = env.openDbi("test-db", DbiFlags.MDB_CREATE);

            final ByteBuffer keyBuffer = ByteBuffer.allocateDirect(100);
            final ByteBuffer valBuffer = ByteBuffer.allocateDirect(100);

            keyBuffer.put("hello".getBytes(StandardCharsets.UTF_8));
            keyBuffer.flip();
            valBuffer.put("world".getBytes(StandardCharsets.UTF_8));
            valBuffer.flip();

            try (Txn<ByteBuffer> writeTxn = env.txnWrite()) {
                System.out.println("Doing put");
                db.put(writeTxn, keyBuffer, valBuffer);
                writeTxn.commit();
            }

            try (Txn<ByteBuffer> readTxn = env.txnRead()) {
                System.out.println("Doing get");
                final ByteBuffer byteBuffer = db.get(readTxn, keyBuffer);
                System.out.println("Value is '"
                        + (byteBuffer != null ? StandardCharsets.UTF_8.decode(byteBuffer) : "null")
                        + "'");
            }
        }
    }
}
